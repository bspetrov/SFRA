/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./cartridges/app_stripe_sfra/cartridge/client/default/js/stripe.checkout.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./cartridges/app_stripe_sfra/cartridge/client/default/js/stripe.checkout.js":
/*!***********************************************************************************!*\
  !*** ./cartridges/app_stripe_sfra/cartridge/client/default/js/stripe.checkout.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* eslint-env es6 */\n/* eslint-disable no-console */\n/* eslint-disable no-alert */\n/* eslint-disable no-param-reassign */\n/* eslint-disable dot-notation */\n/* eslint-disable no-plusplus */\n/* eslint-disable require-jsdoc */\n/* globals Stripe, $ */\n\n\n\n// vÐ±1\nwindow.idealBankElement = null;\nwindow.sepaIbanElement = null;\nwindow.epsBankElement = null;\nwindow.p24BankElement = null;\n\nvar stripeOptions = [];\nvar betas = document.getElementById('stripePaymentMethodsInBeta').value;\nif (betas) {\n    stripeOptions.betas = betas.split(',');\n}\n\nvar stripeApiVersion = document.getElementById('stripeApiVersion').value;\nif (stripeApiVersion) {\n    stripeOptions.apiVersion = stripeApiVersion;\n}\n\nvar stripe = Stripe(document.getElementById('stripePublicKey').value, stripeOptions);\nvar elements = stripe.elements();\n\nfunction setCustomCardOutcome(result) {\n    var displayError = document.getElementById('card-errors');\n    if (result.error) {\n        displayError.textContent = result.error.message;\n    } else {\n        displayError.textContent = '';\n    }\n}\n\nvar cardBrandToPfClass = {\n    visa: 'pf-visa',\n    mastercard: 'pf-mastercard',\n    amex: 'pf-american-express',\n    discover: 'pf-discover',\n    diners: 'pf-diners',\n    jcb: 'pf-jcb',\n    unknown: 'pf-credit-card'\n};\n\nfunction setCustomCardBrandIcon(brand) {\n    var brandIconElement = document.getElementById('brand-icon');\n    var pfClass = 'pf-credit-card';\n    if (brand in cardBrandToPfClass) {\n        pfClass = cardBrandToPfClass[brand];\n    }\n\n    for (var i = brandIconElement.classList.length - 1; i >= 0; i--) {\n        brandIconElement.classList.remove(brandIconElement.classList[i]);\n    }\n    brandIconElement.classList.add('pf');\n    brandIconElement.classList.add(pfClass);\n}\n\nvar cardElement = null;\nvar cardNumberElement = null;\nif (document.getElementById('card-element')) {\n    cardElement = elements.create('card');\n    cardElement.mount('#card-element');\n    cardElement.addEventListener('change', function (event) {\n        var displayError = document.getElementById('card-errors');\n        if (event.error) {\n            displayError.textContent = event.error.message;\n        } else {\n            displayError.textContent = '';\n        }\n    });\n} else if (document.getElementById('stripe-custom-card-group')) {\n    var style = JSON.parse(document.getElementById('stripe-custom-card-group').dataset.elementstyle);\n\n    cardNumberElement = elements.create('cardNumber', {\n        style: style\n    });\n    cardNumberElement.mount('#card-number-element');\n\n    var cardExpiryElement = elements.create('cardExpiry', {\n        style: style\n    });\n    cardExpiryElement.mount('#card-expiry-element');\n\n    var cardCvcElement = elements.create('cardCvc', {\n        style: style\n    });\n    cardCvcElement.mount('#card-cvc-element');\n\n    cardNumberElement.on('change', function (event) {\n        // Switch brand logo\n        if (event.brand) {\n            setCustomCardBrandIcon(event.brand);\n        }\n\n        setCustomCardOutcome(event);\n    });\n}\n\nvar newCardFormContainer = document.getElementById('new-card-form-container');\nvar savedCardsFormContainer = document.getElementById('saved-cards-container');\nvar cardIdInput = document.getElementsByName('stripe_source_id');\nvar cardNumberInput = document.getElementById('stripe_card_number');\nvar cardHolderInput = document.getElementById('stripe_card_holder');\nvar cardTypeInput = document.getElementById('stripe_card_type');\nvar cardTypeInputSFCC = document.getElementById('cardType');\nvar cardBrandInput = document.getElementById('stripe_card_brand');\nvar cardExpMonthInput = document.getElementById('stripe_card_expiration_month');\nvar cardExpYearInput = document.getElementById('stripe_card_expiration_year');\nvar prUsedInput = document.getElementById('stripe_pr_used');\n\nvar newSepaCardFormContainer = document.getElementById('new-sepa-card-form-container');\nvar savedSepaCardsFormContainer = document.getElementById('saved-sepa-cards-container');\n\nvar idealPlaceholder = document.getElementById('ideal-bank-element');\nvar sepaDebitPlaceholder = document.getElementById('sepa-iban-element');\nvar prbPlaceholder = document.getElementById('payment-request-button');\nvar epsPlaceholder = document.getElementById('eps-bank-element');\nvar p24Placeholder = document.getElementById('p24-bank-element');\n\nvar forceSubmit = false;\nvar prUsed = false;\n\nvar switchToSavedCardsLink = document.getElementById('switch-to-saved-cards');\nif (switchToSavedCardsLink) {\n    switchToSavedCardsLink.addEventListener('click', function () {\n        newCardFormContainer.style.display = 'none';\n        savedCardsFormContainer.style.display = 'block';\n    });\n}\n\nvar switchToNewCardLink = document.getElementById('switch-to-add-card');\nif (switchToNewCardLink) {\n    switchToNewCardLink.addEventListener('click', function () {\n        newCardFormContainer.style.display = 'block';\n        savedCardsFormContainer.style.display = 'none';\n    });\n}\n\nif (savedCardsFormContainer) {\n    newCardFormContainer.style.display = 'none';\n}\n\nfunction isSavedCard() {\n    return newCardFormContainer && newCardFormContainer.style.display === 'none';\n}\n\n// Saved Sepa Direct Debit Card\nvar switchToSavedSepaCardsLink = document.getElementById('switch-to-saved-sepa-cards');\nif (switchToSavedSepaCardsLink) {\n    switchToSavedSepaCardsLink.addEventListener('click', function () {\n        newSepaCardFormContainer.style.display = 'none';\n        savedSepaCardsFormContainer.style.display = 'block';\n    });\n}\n\nvar switchToNewSepaCardLink = document.getElementById('switch-to-add-sepa-card');\nif (switchToNewSepaCardLink) {\n    switchToNewSepaCardLink.addEventListener('click', function () {\n        newSepaCardFormContainer.style.display = 'block';\n        savedSepaCardsFormContainer.style.display = 'none';\n    });\n}\n\nif (savedSepaCardsFormContainer) {\n    newSepaCardFormContainer.style.display = 'none';\n}\n\nfunction isSavedDirectDebitSepaCard() {\n    return newSepaCardFormContainer && newSepaCardFormContainer.style.display === 'none';\n}\n\nfunction capitalize(text) {\n    return text.replace(/\\b\\w/g, function (letter) {\n        return letter.toUpperCase();\n    });\n}\n\nfunction copySelectedSaveCardDetails() {\n    var savedCard = document.querySelector('input[name=saved_card_id]:checked');\n    cardIdInput.forEach(function (input) {\n        input.value = savedCard.value;\n    });\n    cardNumberInput.value = savedCard.dataset.cardnumber;\n    cardHolderInput.value = savedCard.dataset.cardholder;\n    cardTypeInput.value = savedCard.dataset.cardtype;\n    cardTypeInputSFCC.value = capitalize(savedCard.dataset.cardtype);\n    cardExpMonthInput.value = savedCard.dataset.cardexpmonth;\n    cardExpYearInput.value = savedCard.dataset.cardexpyear;\n    prUsedInput.value = '';\n}\n\nfunction copyNewCardDetails(paymentMethod) {\n    cardIdInput.forEach(function (input) {\n        input.value = paymentMethod.id;\n    });\n\n    if (paymentMethod.card) {\n        cardNumberInput.value = '************' + paymentMethod.card.last4;\n        cardTypeInput.value = '';\n        cardTypeInputSFCC.value = capitalize(paymentMethod.card.brand);\n        cardBrandInput.value = paymentMethod.card.brand;\n        cardExpMonthInput.value = paymentMethod.card.exp_month;\n        cardExpYearInput.value = paymentMethod.card.exp_year;\n    }\n    cardHolderInput.value = paymentMethod.billing_details && paymentMethod.billing_details.name;\n    prUsedInput.value = '';\n}\n\nfunction getOwnerDetails() {\n    var stateElement = document.querySelector('.billing-address select[name$=\"_stateCode\"]') || document.querySelector('.billing-address input[name$=\"_stateCode\"]')\n        || document.querySelector('select[name$=\"_stateCode\"]') || document.querySelector('input[name$=\"_stateCode\"]');\n\n    var ownerNames = (document.querySelector('.billing-address input[name$=\"_firstName\"]') && document.querySelector('.billing-address input[name$=\"_lastName\"]'))\n        ? document.querySelector('.billing-address input[name$=\"_firstName\"]').value + ' ' + document.querySelector('.billing-address input[name$=\"_lastName\"]').value\n        : document.querySelector('input[name$=\"_firstName\"]').value + ' ' + document.querySelector('input[name$=\"_lastName\"]').value;\n\n    var addrLine1 = document.querySelector('.billing-address input[name$=\"_address1\"]')\n        ? document.querySelector('.billing-address input[name$=\"_address1\"]').value : document.querySelector('input[name$=\"_address1\"]').value;\n\n    var addrLine2 = document.querySelector('.billing-address input[name$=\"_address2\"]')\n        ? document.querySelector('.billing-address input[name$=\"_address2\"]').value : document.querySelector('input[name$=\"_address2\"]').value;\n\n    var addrCity = document.querySelector('.billing-address input[name$=\"_city\"]')\n        ? document.querySelector('.billing-address input[name$=\"_city\"]').value : document.querySelector('input[name$=\"_city\"]').value;\n\n    var addrPostalCode = document.querySelector('.billing-address input[name$=\"_postalCode\"]')\n        ? document.querySelector('.billing-address input[name$=\"_postalCode\"]').value : document.querySelector('input[name$=\"_postalCode\"]').value;\n\n    var addrCountry = document.querySelector('.billing-address select[name$=\"_country\"]')\n        ? document.querySelector('.billing-address select[name$=\"_country\"]').value : document.querySelector('select[name$=\"_country\"]').value;\n\n    var ownerEmail = '';\n    if ($('.customer-summary-email').length && $('.customer-summary-email').text()) {\n        ownerEmail = $('.customer-summary-email').text();\n    } else {\n        ownerEmail = document.querySelector('#dwfrm_billing input[name$=\"_email\"]')\n            ? document.querySelector('#dwfrm_billing input[name$=\"_email\"]').value\n            : document.querySelector('input[name$=\"_email\"]').value;\n    }\n\n    // SFRA 6 issue with email not presented on checkout\n    if (!ownerEmail || ownerEmail === 'null') {\n        $.ajax({\n            url: document.getElementById('getCustomerEmailURL').value,\n            method: 'GET',\n            dataType: 'json',\n            async: false\n        }).done(function (json) {\n            ownerEmail = json.email;\n            $('.customer-summary-email').text(json.email);\n        });\n    }\n\n    var ownerPhone = document.querySelector('#dwfrm_billing input[name$=\"_phone\"]')\n        ? document.querySelector('#dwfrm_billing input[name$=\"_phone\"]').value : document.querySelector('input[name$=\"_phone\"]').value;\n\n    return {\n        name: ownerNames,\n        address: {\n            line1: addrLine1,\n            line2: addrLine2,\n            city: addrCity,\n            postal_code: addrPostalCode,\n            country: addrCountry,\n            state: stateElement ? stateElement.value : ''\n        },\n        email: ownerEmail,\n        phone: ownerPhone\n    };\n}\n\nfunction getSourceType(selectedPaymentMethod) {\n    return {\n        STRIPE_ACH_DEBIT: 'ach_debit',\n        STRIPE_ALIPAY: 'alipay',\n        STRIPE_MULTIBANCO: 'multibanco',\n        STRIPE_WECHATPAY: 'wechat',\n        STRIPE_KLARNA: 'klarna'\n    }[selectedPaymentMethod];\n}\n\nfunction getCreateSourcePayload(selectedPaymentMethod) {\n    var stripeSiteIdInput = document.getElementById('stripe_site_id');\n    var stripeOrderNumberInput = document.getElementById('stripe_order_number');\n    var stripeReturnURLInput = document.getElementById('stripe_return_url');\n    var stripeOrderAmountInput = document.getElementById('stripe_order_amount');\n    var stripeOrderCurrencyInput = document.getElementById('stripe_order_currency');\n\n    var amountToPay = parseFloat(stripeOrderAmountInput.value);\n    var currencyCode = stripeOrderCurrencyInput.value && stripeOrderCurrencyInput.value.toLowerCase();\n    var returnURL = stripeReturnURLInput.value;\n\n    return {\n        type: getSourceType(selectedPaymentMethod),\n        amount: amountToPay,\n        currency: currencyCode,\n        redirect: {\n            return_url: returnURL\n        },\n        metadata: {\n            site_id: stripeSiteIdInput.value,\n            order_id: stripeOrderNumberInput.value\n        },\n        owner: getOwnerDetails()\n    };\n}\n\nfunction processCreateSourceResult(result) {\n    if (result.error) {\n        alert(result.error.message);\n    } else {\n        var sourceIdInputs = document.getElementsByName('stripe_source_id');\n        var sourceClientSecretInput = document.getElementById('stripe_source_client_secret');\n        var redirectURLInput = document.getElementById('stripe_redirect_url');\n\n        sourceIdInputs.forEach(function (input) {\n            input.value = result.source.id;\n        });\n\n        sourceClientSecretInput.value = result.source.client_secret;\n        if (result.source.redirect) {\n            redirectURLInput.value = result.source.redirect.url;\n        }\n\n        // window.location.replace(result.source.redirect.url);\n        // v1\n        // eslint-disable-next-line no-unused-vars\n        $('body').on('checkout:updateCheckoutView', function (e, data) {\n            window.location.replace(result.source.redirect.url);\n        });\n\n        $('.submit-payment').click();\n        $.spinner().start();\n    }\n}\n\nfunction handleServerResponse(response) {\n    if (response.error) {\n        alert(response.error.message);\n        window.location.replace(document.getElementById('billingPageUrl').value);\n    } else if (response.requires_action) {\n        // Use Stripe.js to handle required card action\n        stripe.handleCardAction(response.payment_intent_client_secret).then(function (result) {\n            if (result.error) {\n                alert(result.error.message);\n                window.location.replace(document.getElementById('billingPageUrl').value);\n            } else {\n                // The card action has been handled\n                // The PaymentIntent can be confirmed again on the server\n                $.ajax({\n                    url: document.getElementById('beforePaymentAuthURL').value,\n                    method: 'POST',\n                    dataType: 'json',\n                    data: {\n                        csrf_token: $('[name=\"csrf_token\"]').val()\n                    }\n                }).done(function (json) {\n                    handleServerResponse(json);\n                }).fail(function (msg) {\n                    if (msg.responseJSON.redirectUrl) {\n                        window.location.href = msg.responseJSON.redirectUrl;\n                    } else {\n                        alert(msg);\n                    }\n                });\n            }\n        });\n    } else {\n        forceSubmit = true;\n        $('button.place-order').click();\n    }\n}\n\nfunction populateBillingData(pr) {\n    var form = document.getElementById('dwfrm_billing');\n\n    var payerName = pr.payerName;\n    if (payerName) {\n        var payerNameSplit = payerName.split(' ');\n\n        if (payerNameSplit.length > 1) {\n            var firstName = payerNameSplit[0];\n            var lastName = payerNameSplit[1];\n\n            form.querySelector('input[name$=\"_firstName\"]').value = firstName;\n            form.querySelector('input[name$=\"_lastName\"]').value = lastName;\n        } else {\n            form.querySelector('input[name$=\"_firstName\"]').value = payerName;\n            form.querySelector('input[name$=\"_lastName\"]').value = payerName;\n        }\n    }\n\n    form.querySelector('input[name$=\"_email\"]').value = pr.payerEmail;\n    form.querySelector('input[name$=\"_phone\"]').value = pr.payerPhone;\n\n    var selectCountryElement = form.querySelector('select[name$=\"_country\"]');\n    var prCountry = pr.paymentMethod.billing_details.address.country.toLowerCase();\n    var prCountryExists = ($('#' + selectCountryElement.id + ' option[value=' + prCountry + ']').length > 0);\n\n    if (prCountryExists) {\n        selectCountryElement.value = prCountry;\n    }\n\n    form.querySelector('input[name$=\"_city\"]').value = pr.paymentMethod.billing_details.address.city;\n    form.querySelector('input[name$=\"_postalCode\"]').value = pr.paymentMethod.billing_details.address.postal_code;\n    form.querySelector('input[name$=\"_address1\"]').value = pr.paymentMethod.billing_details.address.line1;\n    form.querySelector('input[name$=\"_address2\"]').value = pr.paymentMethod.billing_details.address.line2;\n\n    var stateElement = form.querySelector('select[name$=\"_stateCode\"]') || form.querySelector('input[name$=\"_stateCode\"]');\n    stateElement.value = pr.paymentMethod.billing_details.address.state;\n}\n\nfunction processWeChatCreateSourceResult(result) {\n    if (result.error) {\n        alert(result.error.message);\n    } else {\n        var sourceIdInputs = document.getElementsByName('stripe_source_id');\n        var sourceClientSecretInput = document.getElementById('stripe_source_client_secret');\n        var sourceWeChatQRCodeURL = document.getElementById('stripe_wechat_qrcode_url');\n\n        sourceIdInputs.forEach(function (input) {\n            input.value = result.source.id;\n        });\n\n        sourceClientSecretInput.value = result.source.client_secret;\n        sourceWeChatQRCodeURL.value = result.source.wechat.qr_code_url;\n\n        var stripeReturnURL = document.getElementById('stripe_return_url').value;\n\n        // eslint-disable-next-line no-unused-vars\n        $('body').on('checkout:updateCheckoutView', function (e, data) {\n            window.location.replace(stripeReturnURL);\n        });\n\n        $('.submit-payment').click();\n        $.spinner().start();\n    }\n}\n\nfunction getCreateWeChatSourcePayload() {\n    var stripeSiteIdInput = document.getElementById('stripe_site_id');\n    var stripeOrderNumberInput = document.getElementById('stripe_order_number');\n    var stripeOrderAmountInput = document.getElementById('stripe_order_amount');\n    var stripeOrderCurrencyInput = document.getElementById('stripe_order_currency');\n\n    var amountToPay = parseFloat(stripeOrderAmountInput.value);\n    var currencyCode = stripeOrderCurrencyInput.value && stripeOrderCurrencyInput.value.toLowerCase();\n\n    return {\n        type: 'wechat',\n        amount: amountToPay,\n        currency: currencyCode,\n        statement_descriptor: stripeOrderNumberInput.value,\n        metadata: {\n            site_id: stripeSiteIdInput.value,\n            order_id: stripeOrderNumberInput.value\n        },\n        owner: getOwnerDetails()\n    };\n}\n\nfunction getCreateKlarnaSourcePayload() {\n    var stripeSiteIdInput = document.getElementById('stripe_site_id');\n    var stripeOrderNumberInput = document.getElementById('stripe_order_number');\n    var stripeOrderAmountInput = document.getElementById('stripe_order_amount');\n    var stripeOrderCurrencyInput = document.getElementById('stripe_order_currency');\n    var stripeOrderItemsInput = document.getElementById('stripe_order_items');\n    var stripeOrderShippingInput = document.getElementById('stripe_order_shipping');\n\n    var stripeShippingFirstName = document.getElementById('stripe_shipping_first_name').value;\n    var stripeShippingLastName = document.getElementById('stripe_shipping_last_name').value;\n\n    var stripeSiteLocale = document.getElementById('stripe_site_locale').value;\n\n    var stripeOrderPurchaseCoutry = document.getElementById('stripe_purchase_country').value\n        ? document.getElementById('stripe_purchase_country').value\n        : document.getElementById('billingCountry').value;\n    var stripeOrderItems = JSON.parse(stripeOrderItemsInput.value);\n\n    var amountToPay = parseFloat(stripeOrderAmountInput.value);\n    var currencyCode = stripeOrderCurrencyInput.value && stripeOrderCurrencyInput.value.toLowerCase();\n\n    var firstName = document.getElementById('billingFirstName').value ? document.getElementById('billingFirstName').value : document.querySelector('input[name$=\"_firstName\"]').value;\n    var lastName = document.getElementById('billingLastName').value ? document.getElementById('billingLastName').value : document.querySelector('input[name$=\"_lastName\"]').value;\n\n    var stripeOrderShipping = JSON.parse(stripeOrderShippingInput.value);\n\n    // update values with shipping form\n    var form = document.getElementById('dwfrm_shipping');\n    if ($(form).length > 0) {\n        var phone = $('input[name$=_phone]', form).val();\n        if (phone) {\n            stripeOrderShipping.phone = phone;\n        }\n\n        var line1 = $('input[name$=_address1]', form).val();\n        if (line1) {\n            stripeOrderShipping.address.line1 = line1;\n        }\n\n        var line2 = $('input[name$=_address2]', form).val();\n        if (line2) {\n            stripeOrderShipping.address.line2 = line2;\n        }\n\n        var city = $('input[name$=_city]', form).val();\n        if (city) {\n            stripeOrderShipping.address.city = city;\n        }\n\n        var postalCode = $('input[name$=_postalCode]', form).val();\n        if (postalCode) {\n            stripeOrderShipping.address.postal_code = postalCode;\n        }\n\n        var country = $('input[name$=_country]', form).val();\n\n        if (country) {\n            stripeOrderShipping.address.country = country;\n        }\n\n        var state = $('select[name$=_stateCode],input[name$=_stateCode]', form).val();\n        if (state) {\n            stripeOrderShipping.address.state = state;\n        }\n    }\n\n    return {\n        type: 'klarna',\n        amount: amountToPay,\n        currency: currencyCode,\n        klarna: {\n            product: 'payment',\n            purchase_country: stripeOrderPurchaseCoutry.toUpperCase(),\n            first_name: firstName,\n            last_name: lastName,\n            shipping_first_name: stripeShippingFirstName,\n            shipping_last_name: stripeShippingLastName,\n            locale: stripeSiteLocale\n        },\n        source_order: {\n            items: stripeOrderItems,\n            shipping: stripeOrderShipping\n        },\n        metadata: {\n            site_id: stripeSiteIdInput.value,\n            order_id: stripeOrderNumberInput.value\n        },\n        owner: getOwnerDetails()\n    };\n}\n\nfunction processKlarnaCreateSourceResult(result) {\n    if (result.error) {\n        alert(result.error.message);\n    } else {\n        var sourceIdInputs = document.getElementsByName('stripe_source_id');\n\n        sourceIdInputs.forEach(function (input) {\n            input.value = result.source.id;\n        });\n\n        // Initialize the SDK\n        window.Klarna.Payments.init({\n            client_token: result.source.klarna.client_token\n        });\n\n        // Load the widget for each payment method category:\n        // - pay_later\n        // - pay_over_time\n        // - pay_now\n        var availableCategories = result.source.klarna.payment_method_categories.split(',');\n        var paymentMethodSelected = false;\n        for (let i = 0; i < availableCategories.length; ++i) {\n            var category = availableCategories[i];\n\n            var klarnaPaymentMethodWrapper = document.getElementById('klarna_' + category + '-wrapper');\n            if (klarnaPaymentMethodWrapper) {\n                klarnaPaymentMethodWrapper.style.display = 'block';\n\n                var klarnaLabel = document.getElementById('klarna_' + category + '_label');\n                if (klarnaLabel && result.source.klarna[category + '_name']) {\n                    klarnaLabel.innerHTML = result.source.klarna[category + '_name'];\n                }\n\n                var klarnaImgWrapper = document.getElementById('klarna_' + category + '_img_wrapper');\n                if (klarnaImgWrapper && result.source.klarna[category + '_asset_urls_standard']) {\n                    klarnaImgWrapper.innerHTML = \"<img src='\" + result.source.klarna[category + '_asset_urls_standard'] + \"' />\";\n                }\n            }\n\n            if (!paymentMethodSelected) {\n                document.getElementById('klarna_' + category).checked = true;\n                paymentMethodSelected = true;\n            }\n\n            window.Klarna.Payments.load({\n                container: '#klarna_' + category + '_container',\n                payment_method_category: category\n            }, function (res) {\n                if (res.show_form) {\n                    /*\n                     * this payment method category can be used, allow the customer\n                     * to choose it in your interface.\n                     */\n                } else {\n                    // this payment method category is not available\n                }\n            });\n        }\n    }\n}\n\n/**\n * Validates the ACH Debit form.\n * @returns {boolean} Returns true if the ACH Debit form is valid. Returns false if the ACH Debit form is invalid.\n */\nfunction validateAchDebitForm() {\n    // validate Account Holder Name\n    var accountHolderName = document.getElementById('ach-account-holdername');\n\n    if (!accountHolderName.value) {\n        alert(accountHolderName.dataset.emptyerrormsg);\n        return false;\n    }\n\n    // validate Account Type\n    var accountType = document.getElementById('ach-account-type');\n\n    if (!accountType.value) {\n        alert(accountType.dataset.emptyerrormsg);\n        return false;\n    }\n\n    // validate Account Number\n    var accountNumber = document.getElementById('ach-account-number');\n\n    if (!accountNumber.value) {\n        alert(accountNumber.dataset.emptyerrormsg);\n        return false;\n    }\n\n    // validate Routing Number\n    var routingNumber = document.getElementById('ach-routing-number');\n\n    if (!routingNumber.value) {\n        alert(routingNumber.dataset.emptyerrormsg);\n        return false;\n    }\n\n    return true;\n}\n\nfunction getBankAccountRequestParamsForAchDebit() {\n    var stripeOrderCurrencyInput = document.getElementById('stripe_order_currency');\n    var currencyCode = stripeOrderCurrencyInput.value && stripeOrderCurrencyInput.value.toLowerCase();\n\n    return {\n        country: document.getElementById('stripeAccountCountry').value,\n        currency: currencyCode,\n        routing_number: document.getElementById('ach-routing-number').value,\n        account_number: document.getElementById('ach-account-number').value,\n        account_holder_name: document.getElementById('ach-account-holdername').value,\n        account_holder_type: document.getElementById('ach-account-type').value\n    };\n}\n\nfunction processBankAccountRequestResult(result) {\n    if (result.error) {\n        alert(result.error.message);\n    } else {\n        // init bank account token id\n        var bankAccountTokenIDInputs = document.getElementsByName('stripe_bank_account_token_id');\n        bankAccountTokenIDInputs.forEach(function (input) {\n            input.value = result.token.id;\n        });\n\n        // init bank account token\n        var bankAccountTokenInputs = document.getElementsByName('stripe_bank_account_token');\n        bankAccountTokenInputs.forEach(function (input) {\n            input.value = result.token.bank_account.id;\n        });\n\n        var stripeReturnURL = document.getElementById('stripe_return_url').value;\n\n        // eslint-disable-next-line no-unused-vars\n        $('body').on('checkout:updateCheckoutView', function (e, data) {\n            window.location.replace(stripeReturnURL);\n        });\n\n        $('.submit-payment').click();\n        $.spinner().start();\n    }\n}\n\n// v1\n// eslint-disable-next-line consistent-return\ndocument.querySelector('button.place-order').addEventListener('click', function (event) {\n    event.stopImmediatePropagation();\n\n    // eslint-disable-next-line no-empty\n    if (window.localStorage.getItem('stripe_payment_method') === 'STRIPE_PAYMENT_ELEMENT') {\n        if (forceSubmit) return true;\n\n        forceSubmit = true;\n        $('button.place-order').click();\n    } else if (window.localStorage.getItem('stripe_payment_method') === 'STRIPE_KLARNA') {\n        if (forceSubmit) return true;\n\n        forceSubmit = true;\n        $.spinner().start();\n\n        var klarnaPaymentOption = window.localStorage.getItem('stripe_klarna_payment_option');\n\n        window.Klarna.Payments.authorize({\n            payment_method_category: klarnaPaymentOption\n        }, function (res) {\n            if (res.approved) {\n                // success\n                $.ajax({\n                    url: document.getElementById('beforePaymentAuthURL').value,\n                    method: 'POST',\n                    dataType: 'json',\n                    data: {\n                        csrf_token: $('[name=\"csrf_token\"]').val()\n                    }\n                }).done(function (json) {\n                    forceSubmit = false;\n                    $.spinner().stop();\n                    handleServerResponse(json);\n                }).fail(function (msg) {\n                    forceSubmit = false;\n                    $.spinner().stop();\n                    if (msg.responseJSON.redirectUrl) {\n                        window.location.href = msg.responseJSON.redirectUrl;\n                    } else {\n                        alert(msg.error);\n                    }\n                });\n            } else if (res.error) {\n                // Payment not authorized or an error has occurred\n                alert(res.error);\n                forceSubmit = false;\n                $.spinner().stop();\n                $('.payment-summary .edit-button').click();\n            } else {\n                // handle other states\n                alert('Order not approved');\n                forceSubmit = false;\n                $.spinner().stop();\n                $('.payment-summary .edit-button').click();\n            }\n        });\n    } else {\n        if (forceSubmit) return true;\n\n        $.ajax({\n            url: document.getElementById('beforePaymentAuthURL').value,\n            method: 'POST',\n            dataType: 'json',\n            data: {\n                csrf_token: $('[name=\"csrf_token\"]').val()\n            }\n        }).done(function (json) {\n            handleServerResponse(json);\n        }).fail(function (msg) {\n            if (msg.responseJSON.redirectUrl) {\n                window.location.href = msg.responseJSON.redirectUrl;\n            } else {\n                alert(msg.error);\n            }\n        });\n    }\n});\n\nfunction handleIdealPaymentSubmit() {\n    var idealOwnerNameInput = document.getElementById('ideal-name');\n    if (!idealOwnerNameInput.value) {\n        idealOwnerNameInput.focus();\n        return;\n    }\n\n    var stripeReturnURLInput = document.getElementById('stripe_return_url');\n\n    $.ajax({\n        url: document.getElementById('beforePaymentSubmitURL').value,\n        method: 'POST',\n        dataType: 'json',\n        data: {\n            csrf_token: $('[name=\"csrf_token\"]').val(),\n            type: 'ideal'\n        }\n    }).done(function (json) {\n        if (json && json.error && json.error.message) {\n            alert(json.error.message);\n        }\n        // success client Secret generation\n        if (json.clientSecret) {\n            // eslint-disable-next-line no-unused-vars\n            $('body').on('checkout:updateCheckoutView', function (e, data) {\n                stripe.confirmIdealPayment(\n                    json.clientSecret,\n                    {\n                        payment_method: {\n                            ideal: window.idealBankElement,\n                            billing_details: {\n                                name: idealOwnerNameInput.value\n                            }\n                        },\n                        return_url: stripeReturnURLInput.value\n                    }\n                );\n            });\n\n            $('.submit-payment').click();\n            $.spinner().start();\n        }\n    }).fail(function (msg) {\n        if (msg.responseJSON.redirectUrl) {\n            window.location.href = msg.responseJSON.redirectUrl;\n        } else {\n            alert(msg);\n        }\n    });\n}\n\nfunction handleSepaDebitPaymentSubmit() {\n    var isSavedSepaCard = isSavedDirectDebitSepaCard();\n    var sepaNameInput = document.getElementById('sepa-name');\n\n    // validate sepa card form if not saved card selected\n    if (!isSavedSepaCard && !sepaNameInput.value) {\n        sepaNameInput.focus();\n        return;\n    }\n\n    var owner = getOwnerDetails();\n    var sepaBillingName = (sepaNameInput.value) ? sepaNameInput.value : owner.name;\n\n    var stripeReturnURLInput = document.getElementById('stripe_return_url');\n\n    var beforePaymentSubmitData = {\n        csrf_token: $('[name=\"csrf_token\"]').val(),\n        type: 'sepa_debit'\n    };\n\n    var savedSepaDebitCardId = isSavedSepaCard ? document.querySelector('input[name=\"saved_sepa_card_id\"]:checked').value : '';\n    if (isSavedSepaCard && !savedSepaDebitCardId) {\n        return;\n    }\n\n    if (isSavedSepaCard) {\n        beforePaymentSubmitData.savedSepaDebitCardId = savedSepaDebitCardId;\n    }\n\n    var stripeSaveSepaCardInput = document.getElementById('stripe_save_sepa_card');\n    if (stripeSaveSepaCardInput && stripeSaveSepaCardInput.checked) {\n        beforePaymentSubmitData.saveSepaCard = true;\n    }\n\n    $.ajax({\n        url: document.getElementById('beforePaymentSubmitURL').value,\n        method: 'POST',\n        dataType: 'json',\n        data: beforePaymentSubmitData\n    }).done(function (json) {\n        if (json && json.error && json.error.message) {\n            alert(json.error.message);\n        }\n        // success client Secret generation\n        if (json.clientSecret) {\n            // eslint-disable-next-line no-unused-vars\n            $('body').on('checkout:updateCheckoutView', function (e, data) {\n                var paymentMethod = [];\n                if (savedSepaDebitCardId) {\n                    paymentMethod = savedSepaDebitCardId;\n                } else {\n                    paymentMethod = {\n                        sepa_debit: window.sepaIbanElement,\n                        billing_details: {\n                            name: sepaBillingName,\n                            email: owner.email\n                        }\n                    };\n                }\n\n                stripe.confirmSepaDebitPayment(\n                    json.clientSecret,\n                    {\n                        payment_method: paymentMethod\n                    }\n                ).then(function (result) {\n                    if (!result.error) {\n                        window.location.replace(stripeReturnURLInput.value);\n                    } else {\n                        $.spinner().stop();\n                        $('.payment-summary .edit-button').click();\n                    }\n                });\n            });\n\n            $('.submit-payment').click();\n            $.spinner().start();\n        }\n    }).fail(function (msg) {\n        if (msg.responseJSON.redirectUrl) {\n            window.location.href = msg.responseJSON.redirectUrl;\n        } else {\n            $.spinner().stop();\n            $('.payment-summary .edit-button').click();\n        }\n    });\n}\n\nfunction handleBancontactPaymentSubmit() {\n    var owner = getOwnerDetails();\n\n    var stripeReturnURLInput = document.getElementById('stripe_return_url');\n\n    $.ajax({\n        url: document.getElementById('beforePaymentSubmitURL').value,\n        method: 'POST',\n        dataType: 'json',\n        data: {\n            csrf_token: $('[name=\"csrf_token\"]').val(),\n            type: 'bancontact'\n        }\n    }).done(function (json) {\n        if (json && json.error && json.error.message) {\n            alert(json.error.message);\n        }\n        // success client Secret generation\n        if (json.clientSecret) {\n            // eslint-disable-next-line no-unused-vars\n            $('body').on('checkout:updateCheckoutView', function (e, data) {\n                stripe.confirmBancontactPayment(\n                    json.clientSecret,\n                    {\n                        payment_method: {\n                            billing_details: {\n                                name: owner.name\n                            }\n                        },\n                        return_url: stripeReturnURLInput.value\n                    }\n                );\n            });\n\n            $('.submit-payment').click();\n            $.spinner().start();\n        }\n    }).fail(function (msg) {\n        if (msg.responseJSON.redirectUrl) {\n            window.location.href = msg.responseJSON.redirectUrl;\n        } else {\n            alert(msg);\n        }\n    });\n}\n\nfunction handlePaypalPaymentSubmit() {\n    var stripeReturnURLInput = document.getElementById('stripe_return_url');\n\n    $.ajax({\n        url: document.getElementById('beforePaymentSubmitURL').value,\n        method: 'POST',\n        dataType: 'json',\n        data: {\n            csrf_token: $('[name=\"csrf_token\"]').val(),\n            type: 'paypal'\n        }\n    }).done(function (json) {\n        if (json && json.error && json.error.message) {\n            alert(json.error.message);\n        }\n        // success client Secret generation\n        if (json.clientSecret) {\n            // eslint-disable-next-line no-unused-vars\n            $('body').on('checkout:updateCheckoutView', function (e, data) {\n                stripe.confirmPayPalPayment(\n                    json.clientSecret,\n                    {\n                        return_url: stripeReturnURLInput.value\n                    }\n                );\n            });\n\n            $('.submit-payment').click();\n            $.spinner().start();\n        }\n    }).fail(function (msg) {\n        if (msg.responseJSON.redirectUrl) {\n            window.location.href = msg.responseJSON.redirectUrl;\n        } else {\n            alert(JSON.stringify(msg));\n        }\n    });\n}\n\nfunction handleGiropayPaymentSubmit() {\n    var owner = getOwnerDetails();\n\n    var stripeReturnURLInput = document.getElementById('stripe_return_url');\n\n    $.ajax({\n        url: document.getElementById('beforePaymentSubmitURL').value,\n        method: 'POST',\n        dataType: 'json',\n        data: {\n            csrf_token: $('[name=\"csrf_token\"]').val(),\n            type: 'giropay'\n        }\n    }).done(function (json) {\n        if (json && json.error && json.error.message) {\n            alert(json.error.message);\n        }\n        // success client Secret generation\n        if (json.clientSecret) {\n            // eslint-disable-next-line no-unused-vars\n            $('body').on('checkout:updateCheckoutView', function (e, data) {\n                stripe.confirmGiropayPayment(\n                    json.clientSecret,\n                    {\n                        payment_method: {\n                            billing_details: {\n                                name: owner.name\n                            }\n                        },\n                        return_url: stripeReturnURLInput.value\n                    }\n                );\n            });\n\n            $('.submit-payment').click();\n            $.spinner().start();\n        }\n    }).fail(function (msg) {\n        if (msg.responseJSON.redirectUrl) {\n            window.location.href = msg.responseJSON.redirectUrl;\n        } else {\n            alert(msg);\n        }\n    });\n}\n\nfunction handleSofortPaymentSubmit() {\n    var sofortCountryCodeSelect = document.getElementById('sofort_country_code');\n    var sofortCountryCode = sofortCountryCodeSelect && sofortCountryCodeSelect.selectedOptions && sofortCountryCodeSelect.selectedOptions.length && sofortCountryCodeSelect.selectedOptions[0] && sofortCountryCodeSelect.selectedOptions[0].value;\n\n    if (!sofortCountryCode) {\n        return;\n    }\n\n    var stripeReturnURLInput = document.getElementById('stripe_return_url');\n\n    $.ajax({\n        url: document.getElementById('beforePaymentSubmitURL').value,\n        method: 'POST',\n        dataType: 'json',\n        data: {\n            csrf_token: $('[name=\"csrf_token\"]').val(),\n            type: 'sofort'\n        }\n    }).done(function (json) {\n        if (json && json.error && json.error.message) {\n            alert(json.error.message);\n        }\n        // success client Secret generation\n        if (json.clientSecret) {\n            // eslint-disable-next-line no-unused-vars\n            $('body').on('checkout:updateCheckoutView', function (e, data) {\n                stripe.confirmSofortPayment(\n                    json.clientSecret,\n                    {\n                        payment_method: {\n                            sofort: {\n                                country: sofortCountryCode\n                            }\n                        },\n                        return_url: stripeReturnURLInput.value\n                    }\n                );\n            });\n\n            $('.submit-payment').click();\n            $.spinner().start();\n        }\n    }).fail(function (msg) {\n        if (msg.responseJSON.redirectUrl) {\n            window.location.href = msg.responseJSON.redirectUrl;\n        } else {\n            alert(msg);\n        }\n    });\n}\n\nfunction handleEpsPaymentSubmit() {\n    var epsOwnerNameInput = document.getElementById('eps-name');\n    if (!epsOwnerNameInput.value) {\n        epsOwnerNameInput.focus();\n        return;\n    }\n\n    var stripeReturnURLInput = document.getElementById('stripe_return_url');\n\n    $.ajax({\n        url: document.getElementById('beforePaymentSubmitURL').value,\n        method: 'POST',\n        dataType: 'json',\n        data: {\n            csrf_token: $('[name=\"csrf_token\"]').val(),\n            type: 'eps'\n        }\n    }).done(function (json) {\n        if (json && json.error && json.error.message) {\n            alert(json.error.message);\n        }\n        // success client Secret generation\n        if (json.clientSecret) {\n            // eslint-disable-next-line no-unused-vars\n            $('body').on('checkout:updateCheckoutView', function (e, data) {\n                stripe.confirmEpsPayment(\n                    json.clientSecret,\n                    {\n                        payment_method: {\n                            eps: window.epsBankElement,\n                            billing_details: {\n                                name: epsOwnerNameInput.value\n                            }\n                        },\n                        return_url: stripeReturnURLInput.value\n                    }\n                );\n            });\n\n            $('.submit-payment').click();\n            $.spinner().start();\n        }\n    }).fail(function (msg) {\n        if (msg.responseJSON.redirectUrl) {\n            window.location.href = msg.responseJSON.redirectUrl;\n        } else {\n            alert(msg);\n        }\n    });\n}\n\nfunction handleP24Submit() {\n    var p24OwnerNameInput = document.getElementById('p24-name');\n    if (!p24OwnerNameInput.value) {\n        p24OwnerNameInput.focus();\n        return;\n    }\n\n    var p24OwnerEmailInput = document.getElementById('p24-email');\n    if (!p24OwnerEmailInput.value) {\n        p24OwnerEmailInput.focus();\n        return;\n    }\n\n    var stripeReturnURLInput = document.getElementById('stripe_return_url');\n\n    $.ajax({\n        url: document.getElementById('beforePaymentSubmitURL').value,\n        method: 'POST',\n        dataType: 'json',\n        data: {\n            csrf_token: $('[name=\"csrf_token\"]').val(),\n            type: 'p24'\n        }\n    }).done(function (json) {\n        if (json && json.error && json.error.message) {\n            alert(json.error.message);\n        }\n        // success client Secret generation\n        if (json.clientSecret) {\n            // eslint-disable-next-line no-unused-vars\n            $('body').on('checkout:updateCheckoutView', function (e, data) {\n                stripe.confirmP24Payment(\n                    json.clientSecret,\n                    {\n                        payment_method: {\n                            p24: window.p24BankElement,\n                            billing_details: {\n                                name: p24OwnerNameInput.value,\n                                email: p24OwnerEmailInput.value\n                            }\n                        },\n                        payment_method_options: {\n                            p24: {\n                                tos_shown_and_accepted: true\n                            }\n                        },\n                        return_url: stripeReturnURLInput.value\n                    }\n                );\n            });\n\n            $('.submit-payment').click();\n            $.spinner().start();\n        }\n    }).fail(function (msg) {\n        if (msg.responseJSON.redirectUrl) {\n            window.location.href = msg.responseJSON.redirectUrl;\n        } else {\n            alert(msg);\n        }\n    });\n}\n\nfunction updateBillingAddressAjax(billingAddress) {\n    var url = $('#updateBillingAddress').val();\n    $.ajax({\n        type: 'post',\n        url: url,\n        data: JSON.stringify(billingAddress),\n        contentType: 'application/json; charset=utf-8',\n        traditional: true,\n        success: function (data) {\n            if (data.success) {\n                console.log('User billing address updated successfully.');\n            } else {\n                console.log('billing address update failed.');\n            }\n        }\n    });\n}\n\nfunction updateUserProfileBillingAddress() {\n    if ($('#billingAddressSelector').length) {\n        var selectedBillingAddress = $('#billingAddressSelector').find(':selected');\n        if (selectedBillingAddress.hasClass('isBillingAddress')) {\n            var billingAddress = {};\n            billingAddress.addressId = selectedBillingAddress.val();\n            billingAddress.firstName = $('#billingFirstName').val();\n            billingAddress.lastName = $('#billingLastName').val();\n            billingAddress.address1 = $('#billingAddressOne').val();\n            billingAddress.address2 = $('#billingAddressTwo').val();\n            billingAddress.city = $('#billingAddressCity').val();\n            billingAddress.states = {};\n            billingAddress.states.stateCode = $('#billingState').val();\n            billingAddress.postalCode = $('#billingZipCode').val();\n            billingAddress.countryCode = $('#billingCountry').val();\n            billingAddress.phone = $('#phoneNumber').val();\n\n            updateBillingAddressAjax(billingAddress);\n        }\n    }\n}\n\ndocument.querySelector('button.submit-payment').addEventListener('click', function (event) {\n    // skip event handler for Stripe Payment Elements\n    // eslint-disable-next-line\n    if ($('#dwfrm_billing .' + $('.tab-pane.active').attr('id') + ' .payment-form-fields input.form-control').val() == 'STRIPE_PAYMENT_ELEMENT') {\n        window.localStorage.setItem('stripe_payment_method', 'STRIPE_PAYMENT_ELEMENT');\n        return;\n    }\n\n    let billingForm = document.getElementById('dwfrm_billing');\n    $(billingForm).find('.form-control.is-invalid').removeClass('is-invalid');\n    if (!billingForm.reportValidity()) {\n        billingForm.focus();\n        billingForm.scrollIntoView();\n        return;\n    }\n\n    event.stopImmediatePropagation();\n    updateUserProfileBillingAddress();\n    var activeTabId = $('.tab-pane.active').attr('id');\n    var paymentInfoSelector = '#dwfrm_billing .' + activeTabId + ' .payment-form-fields input.form-control';\n    var selectedPaymentMethod = $(paymentInfoSelector).val();\n    var createSourcePayload;\n\n    window.localStorage.setItem('stripe_payment_method', selectedPaymentMethod);\n\n    switch (selectedPaymentMethod) {\n        case 'CREDIT_CARD':\n            if (prUsed) {\n                console.log('submit prUsed');\n            } else if (isSavedCard()) {\n                copySelectedSaveCardDetails();\n                $('.submit-payment').click();\n            } else {\n                var owner = getOwnerDetails();\n                var stripeCardEl = (!cardElement) ? cardNumberElement : cardElement;\n                stripe.createPaymentMethod('card', stripeCardEl, {\n                    billing_details: {\n                        name: owner.name,\n                        address: owner.address,\n                        email: owner.email,\n                        phone: owner.phone\n                    }\n                }).then(function (result) {\n                    if (result.error) {\n                        alert(result.error.message);\n                    } else {\n                        copyNewCardDetails(result.paymentMethod);\n                        $('.submit-payment').click();\n                    }\n                });\n            }\n            break;\n        case 'STRIPE_ACH_DEBIT':\n            var form = document.getElementById('dwfrm_billing');\n            if (!form.reportValidity()) {\n                form.focus();\n                form.scrollIntoView();\n                break;\n            }\n\n            if (!validateAchDebitForm()) {\n                break;\n            }\n\n            var achDebitParams = getBankAccountRequestParamsForAchDebit();\n            stripe.createToken('bank_account', achDebitParams).then(processBankAccountRequestResult);\n            break;\n        case 'STRIPE_WECHATPAY':\n            createSourcePayload = getCreateWeChatSourcePayload();\n            stripe.createSource(createSourcePayload).then(processWeChatCreateSourceResult);\n            break;\n        case 'STRIPE_KLARNA':\n            var selectedCategory = document.querySelector('.klarna-payment-method:checked').value;\n            window.localStorage.setItem('stripe_klarna_payment_option', selectedCategory);\n\n            var stripeReturnURL = document.getElementById('stripe_return_url').value;\n\n            // eslint-disable-next-line no-unused-vars\n            $('body').on('checkout:updateCheckoutView', function (e, data) {\n                window.location.replace(stripeReturnURL);\n            });\n\n            $('.submit-payment').click();\n            $.spinner().start();\n            break;\n        case 'STRIPE_GIROPAY':\n            handleGiropayPaymentSubmit();\n            break;\n        case 'STRIPE_EPS':\n            handleEpsPaymentSubmit();\n            break;\n        case 'STRIPE_P24':\n            handleP24Submit();\n            break;\n        case 'STRIPE_ALIPAY':\n        case 'STRIPE_MULTIBANCO':\n            createSourcePayload = getCreateSourcePayload(selectedPaymentMethod);\n            stripe.createSource(createSourcePayload).then(processCreateSourceResult);\n            break;\n\n        case 'STRIPE_IDEAL':\n            handleIdealPaymentSubmit();\n            break;\n        case 'STRIPE_BANCONTACT':\n            handleBancontactPaymentSubmit();\n            break;\n        case 'STRIPE_SOFORT':\n            handleSofortPaymentSubmit();\n            break;\n        case 'STRIPE_SEPA_DEBIT':\n            handleSepaDebitPaymentSubmit();\n            break;\n        case 'STRIPE_PAYPAL':\n            handlePaypalPaymentSubmit();\n            break;\n        default:\n            break;\n    }\n});\n\nfunction initIdeal() {\n    window.idealBankElement = elements.create('idealBank', { style: JSON.parse(document.getElementById('stripeIdealElementStyle').value) });\n    window.idealBankElement.mount('#ideal-bank-element');\n}\n\nfunction initEps() {\n    window.epsBankElement = elements.create('epsBank', { style: JSON.parse(document.getElementById('stripeEpsElementStyle').value) });\n    window.epsBankElement.mount('#eps-bank-element');\n}\n\nfunction initP24() {\n    window.p24BankElement = elements.create('p24Bank', { style: JSON.parse(document.getElementById('stripeP24ElementStyle').value) });\n    window.p24BankElement.mount('#p24-bank-element');\n}\n\nfunction initSepaDebit() {\n    window.sepaIbanElement = elements.create('iban', {\n        style: JSON.parse(document.getElementById('stripeSepaDebitStyle').value),\n        supportedCountries: ['SEPA']\n    });\n\n    // Add an instance of the iban Element into the `iban-element` <div>.\n    window.sepaIbanElement.mount('#sepa-iban-element');\n\n    var errorMessage = document.getElementById('sepa-error-message');\n    var bankName = document.getElementById('sepa-bank-name');\n\n    window.sepaIbanElement.on('change', function (event) {\n        // Handle real-time validation errors from the iban Element.\n        if (event.error) {\n            errorMessage.textContent = event.error.message;\n            errorMessage.classList.add('visible');\n        } else {\n            errorMessage.classList.remove('visible');\n        }\n\n        // Display bank name corresponding to IBAN, if available.\n        if (event.bankName) {\n            bankName.textContent = event.bankName;\n            bankName.classList.add('visible');\n        } else {\n            bankName.classList.remove('visible');\n        }\n    });\n}\n\nfunction initPRB() {\n    var stripeOrderAmountInput = document.getElementById('stripe_order_amount');\n    var stripeOrderCurrencyInput = document.getElementById('stripe_order_currency');\n    var amountToPay = parseFloat(stripeOrderAmountInput.value);\n    var currencyCode = stripeOrderCurrencyInput.value && stripeOrderCurrencyInput.value.toLowerCase();\n\n    var paymentRequest = stripe.paymentRequest({\n        country: document.getElementById('stripeAccountCountry').value,\n        currency: currencyCode,\n        total: {\n            label: 'Order Total',\n            amount: amountToPay\n        },\n        requestPayerName: true,\n        requestPayerEmail: true,\n        requestPayerPhone: true\n    });\n\n    var prButton = elements.create('paymentRequestButton', {\n        paymentRequest: paymentRequest,\n        style: {\n            paymentRequestButton: JSON.parse(document.getElementById('stripePaymentButtonStyle').value)\n        }\n    });\n\n    // Check the availability of the Payment Request API first.\n    paymentRequest.canMakePayment().then(function (result) {\n        if (result) {\n            prButton.mount('#payment-request-button');\n        } else {\n            document.getElementById('payment-request-button').style.display = 'none';\n        }\n    });\n\n    paymentRequest.on('paymentmethod', function (ev) {\n        try {\n            prUsed = true;\n            prUsedInput.value = 'true';\n\n            populateBillingData(ev);\n            copyNewCardDetails(ev.paymentMethod);\n\n            $('li.nav-item[data-method-id=\"CREDIT_CARD\"] a').click();\n            $('.submit-payment').click();\n\n            ev.complete('success');\n        } catch (e) {\n            prUsed = false;\n            prUsedInput.value = '';\n\n            ev.complete('fail');\n        }\n    });\n\n    // Update request button totals - should be done on 'click' event\n    prButton.on('click', function () {\n        var stripeInputOrderAmount = document.getElementById('stripe_order_amount');\n        var amount = parseFloat(stripeInputOrderAmount.value);\n\n        paymentRequest.update({\n            total: {\n                label: 'Order Total',\n                amount: amount\n            }\n        });\n    });\n}\n\nif (idealPlaceholder) {\n    initIdeal();\n}\n\nif (sepaDebitPlaceholder) {\n    initSepaDebit();\n}\n\nif (prbPlaceholder) {\n    initPRB();\n}\n\nif (epsPlaceholder) {\n    initEps();\n}\n\nif (p24Placeholder) {\n    initP24();\n}\n\nfunction refreshKlarnaWhenIsActive() {\n    // check if Klarna is active\n    var activePaymentMethod = document.getElementsByClassName('nav-link credit-card-tab active');\n    if (!activePaymentMethod.length || !activePaymentMethod[0].attributes['href'].value.includes('KLARNA')) {\n        return;\n    }\n\n    // validate Billing Form\n    let billingForm = document.getElementById('dwfrm_billing');\n    $(billingForm).find('.form-control.is-invalid').removeClass('is-invalid');\n    if (!billingForm.reportValidity()) {\n        billingForm.focus();\n        billingForm.scrollIntoView();\n        return;\n    }\n\n    // create source and load Klarna widget\n    var createSourcePayload = getCreateKlarnaSourcePayload();\n    stripe.createSource(createSourcePayload).then(processKlarnaCreateSourceResult);\n}\n\n// Update stored order amount on shipping method change\n$('body').on('checkout:updateCheckoutView', function () {\n    $.ajax({\n        url: document.getElementById('getStripeOrderItemsURL').value,\n        method: 'GET',\n        dataType: 'json'\n    }).done(function (json) {\n        var stripeOrderAmountInput = document.getElementById('stripe_order_amount');\n        if (stripeOrderAmountInput) {\n            stripeOrderAmountInput.value = json.amount;\n        }\n\n        var stripeOrderItems = document.getElementById('stripe_order_items');\n        if (stripeOrderItems) {\n            stripeOrderItems.value = json.orderItems;\n        }\n\n        var stripeOrderCurrencyInput = document.getElementById('stripe_order_currency');\n        if (stripeOrderCurrencyInput) {\n            stripeOrderCurrencyInput.value = json.currency;\n        }\n\n        var stripeOrderPurchaseCoutry = document.getElementById('stripe_purchase_country');\n        if (stripeOrderPurchaseCoutry) {\n            stripeOrderPurchaseCoutry.value = json.purchase_country;\n        }\n\n        var stripeOrderShippingInput = document.getElementById('stripe_order_shipping');\n        if (stripeOrderShippingInput) {\n            stripeOrderShippingInput.value = json.order_shipping;\n        }\n\n        var stripeShippingFirstName = document.getElementById('stripe_shipping_first_name');\n        if (stripeShippingFirstName) {\n            stripeShippingFirstName.value = json.shipping_first_name;\n        }\n\n        var stripeShippingLastName = document.getElementById('stripe_shipping_last_name');\n        if (stripeShippingLastName) {\n            stripeShippingLastName.value = json.shipping_last_name;\n        }\n\n        refreshKlarnaWhenIsActive();\n    });\n});\n\n// fix issue with SFRA select payment method when edit payment from Order confirmation\nvar ready = (callback) => {\n    if (document.readyState !== 'loading') {\n        callback();\n    } else {\n        document.addEventListener('DOMContentLoaded', callback);\n    }\n};\n\nready(() => {\n    // eslint-disable-next-line no-unused-vars\n    document.querySelector('.payment-summary .edit-button').addEventListener('click', (e) => {\n        var list = document.querySelector('.payment-form').querySelectorAll('.tab-pane');\n        for (var i = 0; i < list.length; ++i) {\n            list[i].classList.remove('active');\n        }\n\n        var activePaymentMethod = document.getElementsByClassName('nav-link credit-card-tab active');\n        if (activePaymentMethod.length) {\n            var selectedPaymentContent = document.getElementById(activePaymentMethod[0].attributes['href'].value.replace('#', ''));\n\n            if (selectedPaymentContent) {\n                selectedPaymentContent.classList.add('active');\n            }\n\n            if (activePaymentMethod[0].attributes['href'].value.includes('KLARNA')) {\n                // create source and load Klarna widgets\n                var createSourcePayload = getCreateKlarnaSourcePayload();\n                stripe.createSource(createSourcePayload).then(processKlarnaCreateSourceResult);\n            }\n        }\n    });\n\n    // eslint-disable-next-line no-unused-vars\n    document.querySelector('.shipping-summary .edit-button').addEventListener('click', (e) => {\n        var list = document.querySelector('.payment-form').querySelectorAll('.tab-pane');\n        for (var i = 0; i < list.length; ++i) {\n            list[i].classList.remove('active');\n        }\n\n        var activePaymentMethod = document.getElementsByClassName('nav-link credit-card-tab active');\n        if (activePaymentMethod.length) {\n            var selectedPaymentContent = document.getElementById(activePaymentMethod[0].attributes['href'].value.replace('#', ''));\n            if (selectedPaymentContent) {\n                selectedPaymentContent.classList.add('active');\n            }\n        }\n    });\n\n    var klarnaLiEl = document.querySelectorAll(\"li.nav-item[data-method-id='STRIPE_KLARNA']\");\n    if (klarnaLiEl.length > 0) {\n        klarnaLiEl[0].addEventListener('click', function (event) {\n            if (!document.querySelector('input[name$=\"_address1\"]').value\n                || !document.querySelector('input[name$=\"_city\"]').value\n                || !document.querySelector('input[name$=\"_postalCode\"]').value\n                || !document.querySelector('select[name$=\"_country\"]').value\n                || !document.querySelector('input[name$=\"_phone\"]').value) {\n                alert(document.getElementById('klarna-widget-wrapper').dataset.errormsg);\n\n                event.stopPropagation();\n                $('.nav-item a.active').click();\n                return false;\n            }\n\n            let billingForm = document.getElementById('dwfrm_billing');\n            $(billingForm).find('.form-control.is-invalid').removeClass('is-invalid');\n            if (!billingForm.reportValidity()) {\n                billingForm.focus();\n                billingForm.scrollIntoView();\n                event.stopPropagation();\n                $('.nav-item a.active').click();\n                return false;\n            }\n\n            // create source and load Klarna widgets\n            var createSourcePayload = getCreateKlarnaSourcePayload();\n            stripe.createSource(createSourcePayload).then(processKlarnaCreateSourceResult);\n\n            return true;\n        });\n    }\n\n    if (document.querySelector('#dwfrm_billing input[name$=\"_firstName\"]')) {\n        document.querySelector('#dwfrm_billing input[name$=\"_firstName\"]').addEventListener('change', refreshKlarnaWhenIsActive);\n    }\n\n    if (document.querySelector('#dwfrm_billing input[name$=\"_lastName\"]')) {\n        document.querySelector('#dwfrm_billing input[name$=\"_lastName\"]').addEventListener('change', refreshKlarnaWhenIsActive);\n    }\n\n    if (document.querySelector('#dwfrm_billing input[name$=\"_address1\"]')) {\n        document.querySelector('#dwfrm_billing input[name$=\"_address1\"]').addEventListener('change', refreshKlarnaWhenIsActive);\n    }\n\n    if (document.querySelector('#dwfrm_billing input[name$=\"_address2\"]')) {\n        document.querySelector('#dwfrm_billing input[name$=\"_address2\"]').addEventListener('change', refreshKlarnaWhenIsActive);\n    }\n\n    if (document.querySelector('#dwfrm_billing input[name$=\"_city\"]')) {\n        document.querySelector('#dwfrm_billing input[name$=\"_city\"]').addEventListener('change', refreshKlarnaWhenIsActive);\n    }\n\n    if (document.querySelector('#dwfrm_billing input[name$=\"_postalCode\"]')) {\n        document.querySelector('#dwfrm_billing input[name$=\"_postalCode\"]').addEventListener('change', refreshKlarnaWhenIsActive);\n    }\n\n    if (document.querySelector('#dwfrm_billing select[name$=\"_country\"]')) {\n        document.querySelector('#dwfrm_billing select[name$=\"_country\"]').addEventListener('change', refreshKlarnaWhenIsActive);\n    }\n\n    if (document.querySelector('#dwfrm_billing input[name$=\"_email\"]')) {\n        document.querySelector('#dwfrm_billing input[name$=\"_email\"]').addEventListener('change', refreshKlarnaWhenIsActive);\n    }\n\n    if (document.querySelector('#dwfrm_billing input[name$=\"_phone\"]')) {\n        document.querySelector('#dwfrm_billing input[name$=\"_phone\"]').addEventListener('change', refreshKlarnaWhenIsActive);\n    }\n\n    refreshKlarnaWhenIsActive();\n});\n\n// eslint-disable-next-line\nfunction handleStripePaymentElementSubmit(event) {\n    // skip event handler for Stripe Payment Elements\n    // eslint-disable-next-line\n    if ($('#dwfrm_billing .' + $('.tab-pane.active').attr('id') + ' .payment-form-fields input.form-control').val() !== 'STRIPE_PAYMENT_ELEMENT') {\n        return;\n    }\n\n    let billingForm = document.getElementById('dwfrm_billing');\n    $(billingForm).find('.form-control.is-invalid').removeClass('is-invalid');\n    if (!billingForm.reportValidity()) {\n        billingForm.focus();\n        billingForm.scrollIntoView();\n        return;\n    }\n\n    event.stopImmediatePropagation();\n    updateUserProfileBillingAddress();\n\n    var stripeReturnURLInput = document.getElementById('stripe_return_url').value;\n    var returnURL = stripeReturnURLInput;\n\n    $.spinner().start();\n    // eslint-disable-next-line\n    stripe.confirmPayment({\n        elements: window.stripePaymentElements,\n        confirmParams: {\n            // Make sure to change this to your payment completion page\n            return_url: returnURL\n        }\n    }).then(function () {\n        window.location.replace(document.getElementById('billingPageUrl').value);\n    });\n\n    $('.submit-payment').click();\n}\n\nfunction initNewStripePaymentIntent() {\n    $.ajax({\n        url: document.getElementById('beforePaymentSubmitURL').value,\n        method: 'POST',\n        dataType: 'json',\n        data: {\n            csrf_token: $('[name=\"csrf_token\"]').val(),\n            type: 'paymentelement'\n        }\n    }).done(function (json) {\n        if (json && json.error && json.error.message) {\n            alert(json.error.message);\n        }\n        // success client Secret generation\n        if (json.clientSecret) {\n            const clientSecret = json.clientSecret;\n            const stripePaymentElementStyleObject = JSON.parse(document.getElementById('stripePaymentElementStyle').value);\n            const appearance = {\n                theme: 'stripe'\n            };\n\n            appearance.variables = stripePaymentElementStyleObject.variables;\n\n            window.stripePaymentElements = stripe.elements({ appearance, clientSecret });\n\n            const paymentElement = window.stripePaymentElements.create('payment');\n            paymentElement.mount('#payment-element');\n        }\n    });\n}\n\n/* Stripe Payment Element */\nready(() => {\n    if ($('#payment-element').length && !$('.payment-summary').is(':visible')) {\n        initNewStripePaymentIntent();\n\n        document.querySelector('button.submit-payment').addEventListener('click', handleStripePaymentElementSubmit);\n    }\n});\n\n\n//# sourceURL=webpack:///./cartridges/app_stripe_sfra/cartridge/client/default/js/stripe.checkout.js?");

/***/ })

/******/ });